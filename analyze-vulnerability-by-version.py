import requests, json
from gav import GAV
from requests.auth import HTTPBasicAuth

def findCleanVersion(group,artifact,version):
	componentsData=[]
	versions=['4.1.6.RELEASE','4.1.7.RELEASE','4.1.8.RELEASE','4.1.9.RELEASE','4.2.0.RELEASE','4.2.1.RELEASE','4.2.2.RELEASE','4.2.3.RELEASE','4.2.4.RELEASE']
	for v in versions:		
		componentsData.append((v,json.loads(getVulnerabilityData(GAV(group,artifact,v)))))

	latestCleanVersion=None
	nearestCleanVersion=None
	foundCleanVersion=False
	for tup in componentsData:
		if not tup[1]['componentDetails'][0]['securityData']['securityIssues']:
			cleanVersion=GAV(group,artifact,tup[0])
			latestCleanVersion=cleanVersion
			if(foundCleanVersion==False):
				foundCleanVersion=True
				nearestCleanVersion=cleanVersion
	print "%s, %s, %s is latest clean version" % (latestCleanVersion.group, latestCleanVersion.artifact, latestCleanVersion.version)
	print "%s, %s, %s is nearest clean version" % (nearestCleanVersion.group, nearestCleanVersion.artifact, nearestCleanVersion.version)


def getVulnerabilityData(gav):
	reportsUrl="http://10.3.13.110:8070/api/v2/components/details"
	payload='{"components":[{"hash": null,"componentIdentifier": {"format":"maven","coordinates": {"artifactId":"%s","extension":"jar","groupId":"%s","version":"%s"}}}]}' % (gav.artifact,gav.group,gav.version)
	session = requests.Session()
	reportResponse = session.post(reportsUrl, auth=HTTPBasicAuth('admin', 'admin123'), data=payload, headers={'Content-Type':'application/json'})
	return reportResponse.text


findCleanVersion("org.springframework","spring-core","4.1.5.RELEASE")