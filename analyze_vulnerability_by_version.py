import requests, json, urllib2, re
import xml.etree.ElementTree as ET
from gav import GAV
from requests.auth import HTTPBasicAuth
from operator import itemgetter

############## Globals #################
reportsUrl="http://10.3.13.110:8070/api/v2/components/details"


##########################################################
######### Find nearest and latest clean versions #########
##########################################################

def findCleanVersion(group,artifact,version,severityThreshold):
	gav = GAV(group,artifact,version)
	componentData=json.loads(getVulnerabilityData(gav))
	securityIssues=[]

	#Check if component has a match in Sonatype
	if componentData['componentDetails'][0]['matchState']=='unknown' or not isUsable(version):
		raise ScanException('Sonatype match state unknown for %s:%s:%s' % (group, artifact, version))
	
	# Check if component is already clean
	if not componentData['componentDetails'][0]['securityData']['securityIssues']:
		print 'Component %s, %s, %s is already clean' % (group, artifact, version)
		return False

	# Find all security issues for given component, and if any of them are above severity threshold
	foundSevereVuln=False
	for vuln in componentData['componentDetails'][0]['securityData']['securityIssues']:
		if vuln['severity']>=severityThreshold:
			foundSevereVuln=True
			securityIssues.append(vuln)
	if not foundSevereVuln:
		return False

	versions = getAllVersions(gav,'http://central.maven.org/maven2/')

	# Check if there was a group, artifact match in Maven Central
	if not versions:
		raise ScanException('No Maven Central match for %s:%s:%s' % (group, artifact, version))

	# Check if therew as a version match in Maven Central
	if version not in versions:
		raise ScanException('Version does not exist in Maven Central for %s:%s:%s' % (group, artifact,version))

	sortedVersions=sortAndFilterVersions(versions)
	sortedVersions=sortedVersions[sortedVersions.index(gav.version):]
	componentsData=[]
	for v in sortedVersions:		
		componentsData.append((v,json.loads(getVulnerabilityData(GAV(group,artifact,v)))))
	latestCleanVersion=None
	nearestCleanVersion=None
	foundCleanVersion=False
	for tup in componentsData:
		if not tup[1]['componentDetails'][0]['securityData']['securityIssues']:
			cleanVersion=tup[0]
			latestCleanVersion=cleanVersion
			if(foundCleanVersion==False):
				foundCleanVersion=True
				nearestCleanVersion=cleanVersion
	if not latestCleanVersion:
		return generateCleanVersionsDict(gav, None, None, securityIssues)
	else:
		return generateCleanVersionsDict(gav, nearestCleanVersion, latestCleanVersion, securityIssues)

def findNearestAndLatestRedHatVersions(group, artifact, version):
	gav = GAV(group,artifact,version)
	versions = getAllVersions(gav,'https://maven.repository.redhat.com/ga/')
	if not versions:
		print "Component %s, %s does not exist in Red Hat repositories" % (group, artifact)
		return generateRedHatVersionsDict(gav, None, None)
	versions.append(gav.version)
	sortedVersions=sortAndFilterVersions(versions)
	if gav.version==sortedVersions[-1]:
		return generateRedHatVersionsDict(gav, sortedVersions[-2], sortedVersions[-2])
	nearestVersion=sortedVersions[sortedVersions.index(gav.version)+1]
	latestVersion=sortedVersions[-1]
	return generateRedHatVersionsDict(gav, nearestVersion, latestVersion)

def generateCleanVersionsDict(gav, nearestVersion, latestVersion, securityIssues):
	gavObj = {'group':gav.group, 'artifact':gav.group, 'version':gav.version}
	return {'gav':gavObj, 'nearestCleanVersion':nearestVersion, 'latestCleanVersion':latestVersion, 'securityIssues':securityIssues}

def generateRedHatVersionsDict(gav, nearestVersion, latestVersion):
	gavObj = {'group':gav.group, 'artifact':gav.group, 'version':gav.version}
	return {'gav':gavObj, 'nearestRedHatVersion':nearestVersion, 'latestRedHatVersion':latestVersion}

def sortAndFilterVersions(versions):
	toSort=[]
	for version in versions:
		if not isUsable(version):
			continue
		versionArray=getSplit(version)
		versionArray.append(postfix(version))
		score=0
		multiplier=10000
		for digit in versionArray:
			score+=int(digit)*(multiplier)
			multiplier=multiplier/100
		toSort.append((version, score))
	sortedTups=sorted(toSort,key=itemgetter(1))
	return [tup[0] for tup in sortedTups]


def getAllVersions(gav,baseUrl):
	url = baseUrl + gav.group.replace('.','/') + '/' + gav.artifact + '/maven-metadata.xml'
	try:
		metadata = urllib2.urlopen(url).read()
		root = ET.fromstring(metadata)
		versioning = root.find('versioning')
		versions = versioning.find('versions').findall('version')
		versions=[version.text for version in versions]
		return versions
	except urllib2.HTTPError, e:
		return False

def gavExistsInMavenCentral(gav):
	versions = getAllVersions(gav,'http://central.maven.org/maven2/')
	if not versions:
		return False
	if gav.version not in versions:
		return False
	return True

def getVulnerabilityData(gav):
	payload='{"components":[{"hash": null,"componentIdentifier": {"format":"maven","coordinates": {"artifactId":"%s","extension":"jar","groupId":"%s","version":"%s"}}}]}' % (gav.artifact,gav.group,gav.version)
	session = requests.Session()
	reportResponse = session.post(reportsUrl, auth=HTTPBasicAuth('admin', 'admin123'), data=payload, headers={'Content-Type':'application/json'})
	return reportResponse.text


def getSplit(version):
	versionList = list()
	first = version.split('.', 1)
	versionList.append(strip(first[0]))
	if len(first) > 1:
		if '.' in first[1]:
			second = first[1].split('.', 1)
	       		versionList.append(second[0])
			incremental = strip(second[1])
                	if(incremental):
				versionList.append(incremental)
		else:
			minor = strip(first[1])
			if minor:
				versionList.append(minor)
	versionList=[int(v) for v in versionList]
	return versionList

def postfix(version):
	postfix = re.sub('.*?([0-9]*)$',r'\1',version)
	if postfix:
		return int(postfix)
	return 0 

def strip(str):
	index = 0
	for c in str:
		if c.isdigit():
			index+=1
		else:
			break
	return str[:index]

def isUsable(str):
	modified = str.replace('.', '')
	end = str[str.rfind('.')+1:]
	start = str[:str.find('.')]
	#Match letters that appear within a major or minor
	if re.search('[a-z].*(?=\.)',str):
		return None
	if (end.isdigit() and int(end) > 100 ) or (start.isdigit() and int(start)> 100) or start.isdigit()==False:
		return None
	return modified.isdigit() or str.lower().find('redhat') != -1 or str.lower().find('sec') or str.lower().endswith(('final','ga','release')) or re.search('[a-zA-Z]', str) is None

class ScanException(Exception):
    pass
