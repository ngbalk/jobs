import requests, json
from gav import GAV
from requests.auth import HTTPBasicAuth
import urllib2
import xml.etree.ElementTree as ET
import re
from operator import itemgetter

def findCleanVersion(group,artifact,version):
	gav = GAV(group,artifact,version)

	##################################################
	##### Check if current version is clean ##########
	##################################################
	if json.loads(getVulnerabilityData(gav))['componentDetails'][0]['matchState']=='unknown':
		print 'Component %s, %s, %s does not match' % (group, artifact, version)
		return False
	if not json.loads(getVulnerabilityData(gav))['componentDetails'][0]['securityData']['securityIssues']:
		return False

	##########################################################
	######### Find nearest and latest clean versions #########
	##########################################################

	versions = getAllVersions(gav,'http://central.maven.org/maven2/')
	sortedVersions=sortAndFilterVersions(versions)
	sortedVersions=sortedVersions[sortedVersions.index(gav.version):]
	componentsData=[]
	for v in sortedVersions:		
		componentsData.append((v,json.loads(getVulnerabilityData(GAV(group,artifact,v)))))
	latestCleanVersion=None
	nearestCleanVersion=None
	foundCleanVersion=False
	for tup in componentsData:
		if not tup[1]['componentDetails'][0]['securityData']['securityIssues']:
			cleanVersion=GAV(group,artifact,tup[0])
			latestCleanVersion=cleanVersion
			if(foundCleanVersion==False):
				foundCleanVersion=True
				nearestCleanVersion=cleanVersion
	#print json.dumps(componentsData)
	if not latestCleanVersion:
		return {'gav':gav.group+':'+gav.artifact+':'+gav.version,'nearestCleanVersion':None,'latestCleanVersion':None}
	else:
		return {'gav':gav.group+':'+gav.artifact+':'+gav.version,"nearestCleanVersion":{"group":nearestCleanVersion.group, "artifact":nearestCleanVersion.artifact,"version":nearestCleanVersion.version},"latestCleanVersion":{"group":latestCleanVersion.group, "artifact":latestCleanVersion.artifact,"version":latestCleanVersion.version}}

def findNearestAndLatestRedHatVersions(group, artifact, version):
	gav = GAV(group,artifact,version)
	versions = getAllVersions(gav,'https://maven.repository.redhat.com/ga/')
	if len(versions)==1:
		return {'gav':gav.group+':'+gav.artifact+':'+gav.version,'nearestRedHatVersion':None,'latestRedHatVersion':None}
	versions.append(gav.version)
	sortedVersions=sortAndFilterVersions(versions)
	if gav.version==sortedVersions[-1]:
		return {'gav':gav.group+':'+gav.artifact+':'+gav.version,'nearestRedHatVersion':sortedVersions[-2],'latestRedHatVersion':sortedVersions[-2]}
	nearestVersion=sortedVersions[sortedVersions.index(gav.version)+1]
	latestVersion=sortedVersions[-1]
	return {'gav':gav.group+':'+gav.artifact+':'+gav.version,'nearestRedHatVersion':{"group":nearestVersion.group,"artifact":nearestVersion.artifact,"version":nearestVersion.version},'latestRedHatVersion':{"group":latestVersion.group,"artifact":latestVersion.artifact,"version":latestVersion.version}}


def sortAndFilterVersions(versions):
	toSort=[]
	for version in versions:
		if not isUsable(version):
			continue
		versionArray=getSplit(version)
		versionArray.append(postfix(version))
		score=0
		multiplier=10000
		for digit in versionArray:
			score+=int(digit)*(multiplier)
			multiplier/100
		toSort.append((version, score))
	sortedTups=sorted(toSort,key=itemgetter(1))
	return [tup[0] for tup in sortedTups]


def getAllVersions(gav,baseUrl):
	url = baseUrl + gav.group.replace('.','/') + '/' + gav.artifact + '/maven-metadata.xml'
	metadata = urllib2.urlopen(url).read()
	root = ET.fromstring(metadata)
	versioning = root.find('versioning')
	versions = versioning.find('versions').findall('version')
	versions=[version.text for version in versions]
	return versions	

def getVulnerabilityData(gav):
	reportsUrl="http://10.3.13.110:8070/api/v2/components/details"
	payload='{"components":[{"hash": null,"componentIdentifier": {"format":"maven","coordinates": {"artifactId":"%s","extension":"jar","groupId":"%s","version":"%s"}}}]}' % (gav.artifact,gav.group,gav.version)
	session = requests.Session()
	reportResponse = session.post(reportsUrl, auth=HTTPBasicAuth('admin', 'admin123'), data=payload, headers={'Content-Type':'application/json'})
	return reportResponse.text

def getSplit(version):
	versionList = list()
	first = version.split('.', 1)
	versionList.append(strip(first[0]))
	if len(first) > 1:
		if '.' in first[1]:
			second = first[1].split('.', 1)
	       		versionList.append(second[0])
			incremental = strip(second[1])
                	if(incremental):
				versionList.append(incremental)
		else:
			minor = strip(first[1])
			if minor:
				versionList.append(minor)
	versionList=[int(v) for v in versionList]
	return versionList

def postfix( version ):
	postfix = re.sub('.*?([0-9]*)$',r'\1',version)
	if postfix:
		return int(postfix)
	return 0 

def strip(str):
	index = 0
	for c in str:
		if c.isdigit():
			index+=1
		else:
			break
	return str[:index]

def isUsable(str):
	modified = str.replace('.', '')
	end = str[str.rfind('.')+1:]
	start = str[:str.find('.')]
	if (end.isdigit() and int(end) > 100 ) or (start.isdigit() and int(start)> 100):
		return None
	return modified.isdigit() or str.lower().find('redhat') != -1 or str.lower().find('sec') or str.lower().endswith(('final','ga','release')) or re.search('[a-zA-Z]', str) is None
