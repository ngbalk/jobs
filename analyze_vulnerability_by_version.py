import requests, json
from gav import GAV
from requests.auth import HTTPBasicAuth
import urllib2
import xml.etree.ElementTree as ET
from operator import itemgetter

def findCleanVersion(group,artifact,version):
	gav = GAV(group,artifact,version)

	##################################################
	##### Check if current version is clean ##########
	##################################################

	if not json.loads(getVulnerabilityData(gav))['componentDetails'][0]['securityData']['securityIssues']:
		return gav.group+','+gav.artifact+','+gav.version + ' is already clean.'

	##########################################################
	######### Find nearest and latest clean versions #########
	##########################################################

	url = 'http://central.maven.org/maven2/' + gav.group.replace('.','/') + '/' + artifact + '/maven-metadata.xml'
	metadata = urllib2.urlopen(url).read()
	root = ET.fromstring(metadata)
	versioning = root.find('versioning')
	versions = versioning.find('versions').findall('version')
	versionsByScore=[]
	scores=[100000,1000,1]
	for version in versions:
		splitVersion=getSplit(version.text)
		versionScore=0
		for i in range(len(splitVersion)):
			versionScore+=splitVersion[i]*scores[i]
		versionScoreTup=(version.text, versionScore)
		versionsByScore.append(versionScoreTup)
	sortedVersionsTups=sorted(versionsByScore,key=itemgetter(1))
	sortedVersions=[tup[0] for tup in sortedVersionsTups]
	sortedVersions=sortedVersions[sortedVersions.index(gav.version):]
	componentsData=[]
	for v in sortedVersions:		
		componentsData.append((v,json.loads(getVulnerabilityData(GAV(group,artifact,v)))))
	latestCleanVersion=None
	nearestCleanVersion=None
	foundCleanVersion=False
	for tup in componentsData:
		if not tup[1]['componentDetails'][0]['securityData']['securityIssues']:
			cleanVersion=GAV(group,artifact,tup[0])
			latestCleanVersion=cleanVersion
			if(foundCleanVersion==False):
				foundCleanVersion=True
				nearestCleanVersion=cleanVersion
	#print json.dumps(componentsData)
	if not latestCleanVersion:
		return {gav.group+':'+gav.artifact+':'+gav.version:None}
	else:
		return {gav.group+':'+gav.artifact+':'+gav.version:{"nearestCleanVersion":{"group":nearestCleanVersion.group, "artifact":nearestCleanVersion.artifact,"version":nearestCleanVersion.version},"latestCleanVersion":{"group":latestCleanVersion.group, "artifact":latestCleanVersion.artifact,"version":latestCleanVersion.version}}}

def getVulnerabilityData(gav):
	reportsUrl="http://10.3.13.110:8070/api/v2/components/details"
	payload='{"components":[{"hash": null,"componentIdentifier": {"format":"maven","coordinates": {"artifactId":"%s","extension":"jar","groupId":"%s","version":"%s"}}}]}' % (gav.artifact,gav.group,gav.version)
	session = requests.Session()
	reportResponse = session.post(reportsUrl, auth=HTTPBasicAuth('admin', 'admin123'), data=payload, headers={'Content-Type':'application/json'})
	return reportResponse.text

def getSplit(version):
	versionList = list()
	first = version.split('.', 1)
	versionList.append(strip(first[0]))
	if len(first) > 1:
		if '.' in first[1]:
			second = first[1].split('.', 1)
	       		versionList.append(second[0])
			incremental = strip(second[1])
                	if(incremental):
				versionList.append(incremental)
		else:
			minor = strip(first[1])
			if minor:
				versionList.append(minor)
	versionList=[int(version) for version in versionList]
	return versionList

def strip(str):
	index = 0
	for c in str:
		if c.isdigit():
			index+=1
		else:
			break
	return str[:index]